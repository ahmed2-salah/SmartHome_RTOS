/*
 * main.c
 *
 *  Created on: Jan 17, 2024
 *      Author: ahmed saeed
 */
#include "STD_Types.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"

//define semaphore for sahred rersourse LCD
SemaphoreHandle_t LCDsemph ;

void Task1(void* pvParameter);
void Task2(void* pvParameter);
void Task3(void* pvParameter);


int main()
{
	//creat emaphor //initilize

	LCDsemph=xSemaphoreCreateCounting(2,0);  //rerturn handelr(address in SCB ) of semaphore or NULL
	//creat the tasks
	xTaskCreate(Task1,"Task1",100,NULL,1,NULL);
	xTaskCreate(Task2,"Task2",100,NULL,1,NULL);
	xTaskCreate(Task3,"Task3",100,NULL,1,NULL);

	vTaskStartScheduler();

	while(1)
	{
	}
	return 0;
}

void Task1(void* pvParameter)
{
	uint8 state;

	while(1)
	{
		//return true or false
		state=xSemaphoreTake(LCDsemph,100); // 100 ticks to wait in case the semaphre is unavialble

		if (state == pdTRUE)
		{
			//accsesss the shared resource --->LCD
			/// lcd send string(task1)
			//
			xSemaphoreGive(LCDsemph); // release the semphare
			vTaskDelay(1000);
		}
	}
}
void Task2(void* pvParameter)
{
	uint8 state;
	while(1)
	{
		//return true or false
		state=xSemaphoreTake(LCDsemph,100); // 100 ticks to wait in case the semaphre is unavialble
		if (state == pdTRUE)
		{
			//accsesss the shared resource --->LCD
			/// lcd send string(task2)
			//
			xSemaphoreGive(LCDsemph); // release the semphare
			vTaskDelay(500);
		}
	}
}

void Task3(void* pvParameter)
{
	uint8 state;
		while(1)
		{
			//return true or false
			state=xSemaphoreTake(LCDsemph,100); // 100 ticks to wait in case the semaphre is unavialble
			if (state == pdTRUE)
			{
				//accsesss the shared resource --->LCD
				/// lcd send string(task2)
				//
				xSemaphoreGive(LCDsemph); // release the semphare
				vTaskDelay(500);
			}
		}
}


